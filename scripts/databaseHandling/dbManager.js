import Wish from '../models/wish.js'
import Wishlist from '../models/wishlist.js'

const manifest = chrome.runtime.getManifest();
export const manifestVersion = manifest.version;

export default async function checkDBschema() {
  let result = await chrome.storage.local.get('versionNumber');
  let databaseVersion = result.versionNumber;
  if (databaseVersion == undefined) {
    await setupDatabase();
    await seedDatabase();
  } else if (databaseVersion < manifestVersion) {
    await migrateDatabase(databaseVersion, manifestVersion);
  } else if (databaseVersion == manifestVersion) {
    console.log("database is up to date, no update required");
  }
}

async function seedDatabase() {
  await chrome.storage.local.clear(() => {
    console.log("DEBUG: storage cleared");
  });

  await setupDatabase();

  // create default Wishlist
  var habenWollen = new Wishlist({'name': "Haben Wollen"});
  await habenWollen.save();
  await habenWollen.setAsDefaultWishlist();

  // create 2 more wishlists
  var weihnachten = new Wishlist({name: "Weihnachten 2017"});
  await weihnachten.save();
  var geburtstag = new Wishlist({name: "Geburtstag 2017"});
  await geburtstag.save();

  for (let i = 0; i < 20; i++) {
    let formData = {
      'image'       : "https://cdn.lederkram.de/photos/00000004/thumb/alchemistenmagazinguertelnah02.jpg",
      'name'        : `foowish ${i}`,
      'note'        : "this is a wish with an src url",
      'price'       : 69.69,
      'quantity'    : 1,
      'url'         : "https://www.example.de",
      'wishlistId'  : habenWollen.id
    };
    let wish = new Wish(formData);
    await wish.save();
    await new Promise(resolve => setTimeout(resolve, 1));
  }

  for (let i = 0; i < 20; i++) {
    let formData = {
      'image'       : "",
      'name'        : `Weihnachtswunsch ${i}`,
      'note'        : "This is a wish with base64",
      'price'       : 69.69,
      'quantity'    : 1,
      'url'         : "https://www.amazon.com",
      'wishlistId'  : weihnachten.id
    };
    let wish = new Wish(formData);
    await wish.save();
    await new Promise(resolve => setTimeout(resolve, 1));
  }

  for (let i = 0; i < 20; i++) {
    let formData = {
      'name'        : `geburtstagswunsch ${i}`,
      'note'        : "This should be a note card",
      'price'       : 69.69,
      'quantity'    : 1,
      'wishlistId'  : geburtstag.id
    };
    let wish = new Wish(formData);
    await wish.save();
    await new Promise(resolve => setTimeout(resolve, 1));
  }
}

// TODO: make sure the default first time starter setup of the DB serves as a tutorial
async function setupDatabase() {
  console.log("VersionNumber not found; setup of local storage started");
  await chrome.storage.local.set({'versionNumber': manifestVersion});
  console.log("versionNumber set to " + manifestVersion);

  // check and set defaultWishlistId to default
  let defWishlistResult = chrome.storage.local.get('defaultWishlistId');
  if (defWishlistResult.defaultWishlistId == undefined) {
    await chrome.storage.local.set({'defaultWishlistId': 0});
    console.log("defaultWishlistId set to default");
  }

  // check and set wishlists to default
  let wishlistsResult = await chrome.storage.local.get('wishlists');
  if (wishlistsResult.wishlists == undefined) {
    await chrome.storage.local.set({'wishlists': []});
    console.log("wishlists set to default");
  }

  // check and set wishes to default
  let wishesResult = await chrome.storage.local.get('wishes');
  if (wishesResult.wishes == undefined) {
    await chrome.storage.local.set({'wishes': []});
    console.log("wishes set to default");
  }
}

async function migrateDatabase(oldVersion, newVersion) {
  console.log("Update detected, migration started from version " + oldVersion + " to version " + newVersion);
  // If a future updates requires changes to the Database "schema" this is the place to do them
  await chrome.storage.local.set({'versionNumber': newVersion});
}
